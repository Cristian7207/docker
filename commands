# Inicializacion de DOCKER
sudo systemctl start docker
sudo systemctl start docker.socket
sudo systemctl start containerd
sudo systemctl stop docker.socket
sudo systemctl stop docker
sudo systemctl stop containerd
sudo systemctl status docker
sudo systemctl disable docker.socket
sudo systemctl disable docker
sudo systemctl disable containerd
sudo systemctl enable docker.socket
sudo systemctl enable docker
sudo systemctl enable containerd

# INSTALL K0s
curl -sSLf https://get.k0s.sh | sudo sh 
sudo k0s install controller --single
sudo k0s start
sudo k0s status
k0s token create --role=worker
sudo cp /var/lib/k0s/pki/admin.conf ~/admin.conf
export KUBECONFIG=~/admin.conf
kubectl get nodes

### Storage Class
kubectl apply -f https://openebs.github.io/charts/openebs-operator.yaml

kubectl patch storageclass openebs-hostpath -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
kubectl patch storageclass local-path -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
kubectl patch storageclass local-storage -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
kubectl patch storageclass slow -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
kubectl patch storageclass standard -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'

### On Worker
cat /dev/null > k0stoken
sudo k0s install worker --token-file k0stoken
k0s start

### On ARM
wget https://github.com/k0sproject/k0s/releases/download/v1.22.2%2Bk0s.1/k0s-v1.22.2+k0s.1-arm64
chmod 777 k0s-v1.22.2+k0s.1-arm64
mv k0s-v1.22.2+k0s.1-arm64 k0s
mv k0s /usr/bin


### Uninstall
k0s stop
k0s reset
reboot

# Portainer
kubectl apply -n portainer -f https://raw.githubusercontent.com/portainer/k8s/master/deploy/manifests/portainer/portainer.yaml
kubectl -nportainer describe pods
kubectl -nportainer delete pods
kubectl -nportainer get pvc
kubectl -nportainer delete pvc portainer

#KUBECTL
kubectl get pods --all-namespaces
kubectl describe pods --all-namespaces

# INSTALL k3s
### In Server
curl -sfL https://get.k3s.io | sh -
#wget https://github.com/k3s-io/k3s/releases/download/v1.19.15%2Bk3s2/k3s
#chmod 777 k3s
#mv k3s /usr/bin
#k3s server --node-ip=10.0.0.114  & 
sudo cp /etc/rancher/k3s/k3s.yaml ~/admin.conf
export KUBECONFIG=~/admin.conf
kubectl get node
cat /var/lib/rancher/k3s/server/node-token

### In Worker
curl -sfL https://get.k3s.io | K3S_URL=https://10.0.0.114:6443 K3S_TOKEN=K10533f763b9874426e142617bc968e3a4323f9cb7f3723786f95a0d1535ae274b7::server:1c2687f957da5f6ae71c1989caa66945 sh -
cat /var/lib/rancher/k3s/server/node-token
k3s agent --server https://10.0.0.114:6443   --token K108660c762d32dd756a03e4327ee81ec8733031f7b167fd4d3c8ad247e8e075e1a::server:4bd0ac023b76cdd666a310661bbf393b

### Uninstall
/usr/local/bin/k3s-uninstall.sh
/usr/local/bin/k3s-agent-uninstall.sh


####################################################################
sudo k0s install controller --enable-worker
k0s start
k0s status
k0s kubectl get nodes
k0s token create --role=worker
k0s install worker --token-file k0s-token

####################################################################

# microk8s
sudo snap install microk8s --classic --channel=1.21
sudo usermod -a -G microk8s $USER
sudo chown -f -R $USER ~/.kube
su - $USER
microk8s status --wait-ready
microk8s kubectl get nodes
microk8s kubectl get services
~/.bash_aliases
alias kubectl='microk8s kubectl'
kubectl create deployment nginx --image=nginx
kubectl get pods
microk8s enable dns storage portainer

### on worker
microk8s add-node



####################################################################

kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml
kubectl delete -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml
kubectl get ns
kubectl -n kubernetes-dashboard get all
kubectl -n kubernetes-dashboard describe service kubernetes-dashboard
  Endpoints:                10.244.0.5:8443


kubectl -n kubernetes-dashboard get pods -o wide
kubectl -n kubernetes-dashboard get svc
kubectl -n kubernetes-dashboard port-forward kubernetes-dashboard-67484c44f6-hfp9x 8100:8443
kubectl port-forward --address 0.0.0.0  : 


# Debug
kubectl get pods --all-namespaces -o wide
kubectl describe pods --all-namespaces -o wide
kubectl -n kubernetes-dashboard get pod kubernetes-dashboard-67484c44f6-gkmnp
kubectl -n kubernetes-dashboard describe pod kubernetes-dashboard-67484c44f6-hfp9x
kubectl logs web1 -c back1
kubectl exec web1 -c back1 /bin/bash
kubectl -n  edit svc
# kubernetes-dashboard
write -> type: LoadBalancer
kubectl get services --all-namespaces -o wide

kubectl -n kubernetes-dashboard delete deployment kubernetes-dashboard
kubectl get nodes -o wide


 --namespace=kube-system 

k0s default-config > k0s.yaml
k0s server -c k0.yaml

sudo cp /var/lib/k0s/pki/admin.conf ~/admin.conf

clusterUser=root
k0s kubeconfig create --groups "system:masters" $clusterUser > ~/config

wget https://github.com/k0sproject/k0sctl/releases/download/v0.8.4/k0sctl-linux-x64 && mv k0sctl-linux-x64 k0sctl && chmod 777 k0sctl

kubectl describe node om-node1



# K3S
wget https://github.com/k3s-io/k3s/releases/download/v1.22.2%2Bk3s1/k3s
chmod 777 k3s
mv k3s /usr/bin
ip address

k3s server --node-ip=10.0.0.114 &


k3s server --node-ip=10.0.0.53 &


k3s kubectl -n kubernetes-dashboard expose deployment kubernetes-dashboard --port=8100 --type=NodePort
k3s kubectl -n kubernetes-dashboard describe pod
k3s kubectl -n kubernetes-dashboard describe services kubernetes-dashboard
k3s kubectl proxy --address='0.0.0.0' --accept-hosts='^*$' -p 80
# exponer ui kubernetes
k3s kubectl port-forward -n kubernetes-dashboard service/kubernetes-dashboard 10443: 443 --address 0.0.0.0
k3s kubectl create serviceaccount dashboard -n default
k3s kubectl create clusterrolebinding dashboard-admin -n default --clusterrole=cluster-admin --serviceaccount=default:dashboard
k3s kubectl get secrets
k3s kubectl describe secret dashboard-token-q5s7
 sudo cp /etc/rancher/k3s/k3s.yaml ~/admin.conf
export KUBECONFIG=~/admin.conf

docker rmi $(docker images -f "dangling=true" -q)



